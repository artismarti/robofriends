{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","Cardlist","robots","map","robot","i","key","SearchBox","searchField","handleSearch","type","placeholder","onChange","Scroll","children","style","overflowY","height","App","useState","setRobots","setSearchField","useEffect","a","fetch","json","data","fetchRobots","filteredRobots","filter","toLowerCase","includes","e","preventDefault","target","value","CardList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAaeA,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE1B,OACE,yBAAKC,UAAU,6CACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,4BAAKL,EAAL,KACA,2BAAIC,EAAJ,OCeSK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,oCACGA,EAAOC,KAAI,SAACC,EAAOC,GAClB,OACE,kBAAC,EAAD,CAAMC,IAAKD,EACTR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCCdW,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,yCACVY,KAAK,SACLC,YAAY,mBACZC,SAAUH,MCEHI,EATA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACE,yBAAKC,MAAO,CAACC,UAAW,SACvBC,OAAO,UACLH,ICkCQI,G,MAlCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTjB,EADS,KACDkB,EADC,OAEsBD,mBAAS,IAF/B,mBAETX,EAFS,KAEIa,EAFJ,KAIhBC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEAC0BC,MAAM,8CADhC,8BAC+EC,OAD/E,OACMC,EADN,OAEEN,EAAUM,GAFZ,4CADc,uBAAC,WAAD,wBAKdC,KACA,IAGF,IAKMC,EAAiB1B,EAAO2B,QAAO,SAAAzB,GACnC,OAAOA,EAAMT,KAAKmC,cAAcC,SAASvB,EAAYsB,kBAEvD,OACE,yBAAKhC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,6BACE,kBAAC,EAAD,CAAWW,aAZM,SAACuB,GACtBA,EAAEC,iBACFZ,EAAeW,EAAEE,OAAOC,WAYtB,kBAAC,EAAD,KACE,kBAACC,EAAD,CAAUlC,OAAQ0B,QCtBNS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8bee92fd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\n  return (\n    <div className=\"tc bg-green dib br3 shadow-5 pa3 ma2 grow\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n      <h2>{name} </h2>\n      <p>{email}m</p>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card'\n\n\n\nconst Cardlist = ({ robots }) => {\n  return (\n    <>\n      {robots.map((robot, i) => {\n        return (\n          <Card key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}/>\n        )\n        })\n      }\n    </>\n  )\n  \n}\n\n\nexport default Cardlist;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, handleSearch }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--light-green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Enter Robot Name\"\n        onChange={handleSearch}\n      />\n    </div>\n  );\n};\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = ({children}) => {\n  return (\n    <div style={{overflowY: 'scroll',\n     height:'800px'}}>\n      {children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import React, {useState, useEffect} from 'react';\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nconst App = () => {\n  const [robots, setRobots] = useState([])\n  const [searchField, setSearchField] = useState('')\n\n  useEffect(() => {\n    async function fetchRobots() {\n      let data = await (await fetch('https://jsonplaceholder.typicode.com/users')).json()\n      setRobots(data)\n    }\n    fetchRobots();\n  },[]) \n\n\n  const onSearchChange = (e) => {\n    e.preventDefault()\n    setSearchField(e.target.value)\n  }\n\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n  return (\n    <div className='tc'>\n      <h1 className='f1'>Robofriends</h1>\n      <div>\n        <SearchBox handleSearch={onSearchChange}/>\n      </div>\n      <Scroll>\n        <CardList robots={filteredRobots} />\n      </Scroll>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nimport App from './containers/App.jsx'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}